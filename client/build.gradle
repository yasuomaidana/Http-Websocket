plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.kapt") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.plugin.allopen") version "${kotlinVersion}"
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.0"
    id("org.jetbrains.kotlin.plugin.serialization") version "${kotlinVersion}"
    id("io.micronaut.aot") version "4.4.0"

}

version = "0.1"
group = "example.micronaut"
ext{
    mapstruct_version = "latest.release"
}
repositories {
    mavenCentral()
}

dependencies {
    // Micronaut
    kapt("io.micronaut.data:micronaut-data-processor")
    kapt("io.micronaut:micronaut-http-validation")
    kapt("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson") // Keep Jackson
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-websocket")

    compileOnly("io.micronaut:micronaut-http-client")
    testImplementation("io.micronaut:micronaut-http-client")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

    // Micronaut Security
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation('io.projectreactor:reactor-core:3.4.17')
    implementation("org.springframework.security:spring-security-crypto:6.2.0")
    implementation("org.slf4j:jcl-over-slf4j")

    //Test
    testImplementation('org.mockito:mockito-core:3.12.4')
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.1')
    testImplementation('org.testcontainers:mongodb')



    // Kotlin & Kotlinx Serialization
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.0")

    // Thymeleaf
    implementation("io.micronaut.views:micronaut-views-thymeleaf")


    // Database

    //MySQL
    runtimeOnly("com.mysql:mysql-connector-j")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")


    //MongoDB
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.data:micronaut-data-mongodb")
    implementation("io.micronaut.mongodb:micronaut-mongo-reactive")
    runtimeOnly("org.mongodb:mongodb-driver-reactivestreams")
    kapt("io.micronaut.data:micronaut-data-document-processor")

    //GraphQL
    implementation("io.micronaut.graphql:micronaut-graphql")

    // Flyway
    implementation("io.micronaut.flyway:micronaut-flyway:latest")
    runtimeOnly("org.flywaydb:flyway-mysql")

    //Mapstruct
    implementation("org.mapstruct:mapstruct:${mapstruct_version}")
    kapt("org.mapstruct:mapstruct-processor:${mapstruct_version}")

    // If using SnakeYAML
    runtimeOnly("org.yaml:snakeyaml")

    aotPlugins(platform("io.micronaut.platform:micronaut-platform:4.4.3"))
    aotPlugins("io.micronaut.security:micronaut-security-aot")

    runtimeOnly("com.h2database:h2")
}

kapt {
    arguments {
        arg("mapstruct.defaultComponentModel", "jakarta")
    }
}

application {
    mainClass.set("example.micronaut.ApplicationKt")
}

java {
    sourceCompatibility = JavaVersion.toVersion("${jvmTarget}")
}


tasks {
    optimizedNativeJar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}
graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("example.micronaut.*")
    }
    aot {
    // Please review carefully the optimizations enabled below
    // Check https://micronaut-projects.github.io/micronaut-aot/latest/guide/ for more details
        optimizeServiceLoading = false
        convertYamlToJava = false
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
        optimizeNetty = true
        replaceLogbackXml = true
        configurationProperties.put("micronaut.security.jwks.enabled","false")
    }
}



