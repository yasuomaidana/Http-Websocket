plugins {
    id("java")
    id("org.jetbrains.kotlin.jvm") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.kapt") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.plugin.allopen") version "${kotlinVersion}"
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.3.8"
    id("org.jetbrains.kotlin.plugin.serialization") version "${kotlinVersion}"
    id("io.micronaut.aot") version "4.3.8"

}

version = "0.1"
group = "example.micronaut"
ext{
    mapstruct_version = "latest.release"
}
repositories {
    mavenCentral()
}

dependencies {
    // Micronaut
    kapt("io.micronaut.data:micronaut-data-processor")
    kapt("io.micronaut:micronaut-http-validation")
    kapt("io.micronaut.serde:micronaut-serde-processor")
    implementation("io.micronaut.serde:micronaut-serde-jackson") // Keep Jackson
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut:micronaut-websocket")



    // Kotlin & Kotlinx Serialization
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.0")

    // Thymeleaf
    implementation("io.micronaut.views:micronaut-views-thymeleaf")


    // Database
    runtimeOnly("com.mysql:mysql-connector-j")
    runtimeOnly("org.yaml:snakeyaml")

    //Mapstruct
    implementation("org.mapstruct:mapstruct:${mapstruct_version}")
    kapt("org.mapstruct:mapstruct-processor:${mapstruct_version}")

    // If using SnakeYAML
    runtimeOnly("org.yaml:snakeyaml")
}


application {
    mainClass.set("example.micronaut.ApplicationKt")
}
java {
    sourceCompatibility = JavaVersion.toVersion("${jvmTarget}")
}


tasks {
    optimizedNativeJar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}
graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("example.micronaut.*")
    }
}



