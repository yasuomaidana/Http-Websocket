type Query {
    postIt(id: ID!): PostIt
    posts(offset: Int, limit:Int): [PostIt]
    comment(id: ID!): Comment
    comments: [Comment]
}

type Mutation {
    createPostIt(title: String!, content: String!, color: String!): PostIt
    updatePostIt(id: ID!, title: String, content: String, color: String): PostIt
    deletePostIt(id: ID!): Boolean
    createComment(postId: ID!, title: String!, content: String): Comment
    updateComment(id: ID!, title: String, content: String): Comment
    deleteComment(id: ID!): Boolean
    likeComment(id: ID!): Comment
    dislikeComment(id: ID!): Comment
    addChildPostIt(parentId: ID!, childId: ID!): PostIt
    createChildPostIt(parentId: ID!, title: String!, content: String!, color: String!): PostIt
    removeChildPostIt(parentId: ID!, childId: ID!): PostIt
    changeParentPostIt(parentId: ID!, childId: ID!, newParentId: ID!): PostIt
}

type PostIt {
    id: ID
    title: String
    content: String
    childPosts: [PostIt]
    color: String
    comments: [Comment]
    totalPages:Int,
    currentPage:Int
}

type Comment {
    id: ID!
    postId: ID!
    title: String!
    content: String
    votes: Votes!
}

type Votes {
    likes: Int!
    dislikes: Int!
}